#!/usr/bin/env python

import os
import argparse
import tempfile
import shutil
import yaml
import argh
from argh import arg
import hubward


@arg('dirname', help='Directory (or directories) containing '
     'a metadata.yaml file or a metadata-builder.yaml file',
     nargs="+")
def study(dirname):
    if isinstance(dirname, str):
        dirnames = [dirname]
    else:
        dirnames = dirname
    for dirname in dirnames:
        _study = hubward.models.Study(dirname)
        _study.process()


@arg('filename', help='Group config file')
def group(filename):
    _group = hubward.models.Group(filename)
    _group.process()


@arg('filename', help='Group config file')
@arg('--hub-only', help='Just update the hub text files, not data files')
def upload(filename, hub_only=False):
    _group = hubward.models.Group(filename)
    _group.upload(hub_only=hub_only)


@arg('dirname', help='Single study to liftover')
@arg('newdir', help='Destination directory')
@arg('--from_assembly', help='Source assembly')
@arg('--to_assembly', help='Destination assembly')
def liftover(dirname, newdir, from_assembly=None, to_assembly=None):
    _study = hubward.models.Study(dirname)
    dirname = dirname.rstrip(os.path.sep)
    newdir = newdir.rstrip(os.path.sep)
    # First process everything into a temporary directory
    tmpdir = tempfile.mkdtemp()
    for d in _study.data:
        infile = d.processed
        outfile = d.processed.replace(dirname, newdir)
        d.liftover(from_assembly, to_assembly, outfile)

    with open(os.path.join(newdir, 'metadata.yaml'), 'w') as fout:
        hubward.log('Writing new metadata to {0}'.format(fout.name))
        yaml.dump(_study.metadata, fout)

    symlink = os.path.join(newdir, 'ORIGINAL-STUDY')
    if os.path.exists(symlink):
        os.unlink(symlink)
    os.symlink(os.path.abspath(dirname), symlink)


@arg('dirname', help='Path to contain skeleton project')
@arg('--use-metadata-builder', help='Sets up a metadata-builder.py script '
     'instead of a metadata.yaml config file. Useful for more complicated '
     'studies')
def skeleton(dirname, use_metadata_builder=False):
    """
    Populate <dirname> with template files that can be customized on
    a per-study basis.
    """
    if os.path.exists(dirname):
        raise ValueError("Directory {0} exists. Aborting!".format(dirname))

    os.makedirs(dirname)
    if use_metadata_builder:
        with open(os.path.join(dirname, 'metadata-builder.py'), 'w') as fout:
            fout.write(
                hubward.utils.get_resource('metadata_builder_template.py'))
    else:
        metadata_schema = hubward.utils.get_resource(
            'metadata_schema.yaml', as_tempfile=True)
        with open(os.path.join(dirname, 'metadata.yaml'), 'w') as fout:
            hubward.generate_config_from_schema.create_config(
                metadata_schema, fout)

    group_schema = hubward.utils.get_resource(
        'group_schema.yaml', as_tempfile=True)
    with open(os.path.join(dirname, 'example-group.yaml'), 'w') as fout:
        hubward.generate_config_from_schema.create_config(
            group_schema, fout)

    with open(os.path.join(dirname, 'README.rst'), 'w') as fout:
        fout.write('Description of study and necessary processing steps\n')


argh.add_commands(parser, [study, group], namespace='process')
argh.add_commands(parser, [upload, liftover, skeleton])

if __name__ == "__main__":
    argh.dispatch(parser)
